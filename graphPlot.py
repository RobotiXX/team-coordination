import networkx as nx
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt   
import networkx as nx
from matplotlib.pyplot import figure 
import numpy as np
import re

def plot_joint_state_space_graph(S,D,E):
    G = nx.Graph(node_type="joint_state_space")
    G.add_edges_from(E)
    print("Nodes")
    print([node for node in G])
    # specify the nodes you want here
    print("Source, Destination")
    print(S,D)
    color_map = []
    for node in G:
        color_map.append('green')
        # if node==str(S):
        #     color_map.append('blue')
        # elif node==str(D):
        #     color_map.append('red')
        # else:
        #     color_map.append('green')
    # Need to create a layout when doing
    # separate calls to draw nodes and edges
    pos = nx.spring_layout(G)
    #pos = nx.spectral_layout(G)
    nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), 
                            node_color = color_map, node_size = 70)
    nx.draw_networkx_labels(G, pos)
    nx.draw_networkx_edges(G, pos, edgelist=E, edge_color='black', arrows=False, edge_size=5)
    plt.xticks([])
    plt.yticks([])
    plt.show()
    #figure(figsize=(50, 50), dpi=80)

def plot_environment_graph(E):
    G = nx.Graph(node_type="environment_graph")
    G.add_weighted_edges_from(E)
    weight = nx.get_edge_attributes(G, 'weight')
    print(G.edges)
    print(G.nodes)
    print(weight)
    pos = nx.spring_layout(G)
    # pos = nx.shell_layout(G)
    #pos = nx.spectral_layout(G)
    nx.draw_networkx(G, with_labels=True, pos=pos, node_size= 1500, node_color='red', edge_color='green', arrowsize=100, font_size=25)
    plt.show()   
    
def plot_joint_state_space_graphTT(S,D,E):
    G = nx.Graph(node_type="joint_state_space")
    G.add_edges_from(E)
    nodes = [eval(node) for node in G]
    print([eval(node) for node in G])

    pos = {}
    for n in nodes:
        pos[str(n)] = n
        
    print(pos)

    plt.figure()
    #nx.draw(graph, with_labels=False)
    nx.draw(G, with_labels=False, pos=pos,node_color='green', node_size = 70)
    nx.draw_networkx_labels(G, pos)
    plt.show()
    
def plot_environment_graph_test(E):
    G = nx.grid_2d_graph(4, 4)  # 4x4 grid

    pos = nx.spring_layout(G, iterations=1000, seed=39775)

    # Create a 2x2 subplot
    fig, all_axes = plt.subplots(2, 2)
    ax = all_axes.flat

    nx.draw(G, pos, ax=ax[0], font_size=8)
    nx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)
    nx.draw(
        G,
        pos,
        ax=ax[2],
        node_color="tab:green",
        edgecolors="tab:gray",  # Node surface color
        edge_color="tab:gray",  # Color of graph edges
        node_size=250,
        with_labels=False,
        width=6,
    )
    H = G.to_directed()
    nx.draw(
        H,
        pos,
        ax=ax[3],
        node_color="tab:orange",
        node_size=20,
        with_labels=False,
        arrowsize=10,
        width=2,
    )

    # Set margins for the axes so that nodes aren't clipped
    for a in ax:
        a.margins(0.10)
    fig.tight_layout()
    plt.show()
## Graph1: environment graph  
# E = [('0','1', 10), ('1','2',10)]
# pos = {'0':[1,1], '1':[3, 1], '2':[3, -3]}  
# plot_environment_graph(E, pos) 

## Graph 2: joint state space graph
# E = [('(0,0)', '(0,1)'), ('(0,0)', '(1,0)'), ('(0,0)', '(1,1)'), ('(0,1)', '(1,1)'),('(0,1)', '(0,0)'),('(0,1)', '(1,2)'),
#             ('(1,0)', '(1,1)'), ('(1,0)', '(0,0)'),('(1,0)', '(2,0)'),('(1,0)', '(2,1)'),('(1,0)', '(0,1)'), ('(1,2)', '(2,2)'),('(1,2)', '(0,1)'), ('(1,2)', '(2,1)'),
#             ('(2,0)', '(1,1)'),('(2,0)', '(2,1)'),('(2,0)', '(1,0)'),('(2,1)', '(1,1)'),('(2,1)', '(2,2)'), ('(2,1)', '(1,0)'),('(2,1)', '(1,2)'),
#             ('(1,2)', '(1,1)'),('(0,1)', '(0,2)'),('(0,2)', '(1,2)'),('(0,0)', '(0,2)')]

# E = [('(0, 0)', '(0, 1)'), ('(0, 0)', '(1, 0)'), ('(0, 0)', '(1, 1)'),
#      ('(0, 1)', '(0, 0)'), ('(0, 1)', '(0, 2)'), ('(0, 1)', '(0, 3)'), 
#      ('(0, 1)', '(1, 1)'), ('(0, 1)', '(1, 0)'), ('(0, 1)', '(1, 2)'),
#      ('(0, 1)', '(1, 3)'), ('(0, 2)', '(0, 1)'), ('(0, 2)', '(1, 2)'),
#      ('(0, 2)', '(1, 1)'), ('(0, 3)', '(0, 1)'), ('(0, 3)', '(1, 3)'), 
#      ('(0, 3)', '(1, 1)'), ('(1, 0)', '(0, 0)'), ('(1, 0)', '(1, 1)'), 
#      ('(1, 0)', '(2, 0)'), ('(1, 0)', '(3, 0)'), ('(1, 0)', '(0, 1)'), 
#      ('(1, 0)', '(2, 1)'), ('(1, 0)', '(3, 1)'), ('(1, 1)', '(0, 1)'), 
#      ('(1, 1)', '(1, 0)'), ('(1, 1)', '(1, 2)'), ('(1, 1)', '(1, 3)'), 
#      ('(1, 1)', '(2, 1)'), ('(1, 1)', '(3, 1)'), ('(1, 1)', '(0, 0)'), 
#      ('(1, 1)', '(0, 2)'), ('(1, 1)', '(0, 3)'), ('(1, 1)', '(2, 0)'), 
#      ('(1, 1)', '(2, 2)'), ('(1, 1)', '(2, 3)'), ('(1, 1)', '(3, 0)'), 
#      ('(1, 1)', '(3, 2)'), ('(1, 1)', '(3, 3)'), ('(1, 2)', '(0, 2)'),
#      ('(1, 2)', '(1, 1)'), ('(1, 2)', '(2, 2)'), ('(1, 2)', '(3, 2)'), 
#      ('(1, 2)', '(0, 1)'), ('(1, 2)', '(2, 1)'), ('(1, 2)', '(3, 1)'), 
#      ('(1, 3)', '(0, 3)'), ('(1, 3)', '(1, 1)'), ('(1, 3)', '(2, 3)'), 
#      ('(1, 3)', '(3, 3)'), ('(1, 3)', '(0, 1)'), ('(1, 3)', '(2, 1)'), 
#      ('(1, 3)', '(3, 1)'), ('(2, 0)', '(1, 0)'), ('(2, 0)', '(2, 1)'), 
#      ('(2, 0)', '(1, 1)'), ('(2, 1)', '(1, 1)'), ('(2, 1)', '(2, 0)'),
#      ('(2, 1)', '(2, 2)'), ('(2, 1)', '(2, 3)'), ('(2, 1)', '(1, 0)'), 
#      ('(2, 1)', '(1, 2)'), ('(2, 1)', '(1, 3)'), ('(2, 2)', '(1, 2)'), 
#      ('(2, 2)', '(2, 1)'), ('(2, 2)', '(1, 1)'), ('(2, 3)', '(1, 3)'), 
#      ('(2, 3)', '(2, 1)'), ('(2, 3)', '(1, 1)'), ('(3, 0)', '(1, 0)'), 
#      ('(3, 0)', '(3, 1)'), ('(3, 0)', '(1, 1)'), ('(3, 1)', '(1, 1)'), 
#      ('(3, 1)', '(3, 0)'), ('(3, 1)', '(3, 2)'), ('(3, 1)', '(3, 3)'), 
#      ('(3, 1)', '(1, 0)'), ('(3, 1)', '(1, 2)'), ('(3, 1)', '(1, 3)'), 
#      ('(3, 2)', '(1, 2)'), ('(3, 2)', '(3, 1)'), ('(3, 2)', '(1, 1)'), 
#      ('(3, 3)', '(1, 3)'), ('(3, 3)', '(3, 1)'), ('(3, 3)', '(1, 1)')]

#plot_joint_state_space_graph(E) 

# E = [('0', '1'),('1', '0'),('1', '2'), ('1', '3')]
#E = [('0','1', 10), ('1','2',10)]
#E = [('0','1', 10), ('1','2',10),('1','3', 10)]
# E = [('(0, 0)', '(0, 1)'), ('(0, 0)', '(1, 0)'), ('(0, 0)', '(1, 1)'), ('(0, 1)', '(0, 0)'), ('(0, 1)', '(0, 2)'), 
#      ('(0, 1)', '(1, 1)'), ('(0, 1)', '(1, 0)'), ('(0, 1)', '(1, 2)'), ('(0, 2)', '(1, 2)'), ('(0, 2)', '(0, 1)'),
#      ('(0, 2)', '(1, 1)'), ('(1, 0)', '(0, 0)'), ('(1, 0)', '(1, 1)'), ('(1, 0)', '(2, 0)'), ('(1, 0)', '(0, 1)'), 
#      ('(1, 0)', '(2, 1)'), ('(1, 1)', '(0, 1)'), ('(1, 1)', '(1, 0)'), ('(1, 1)', '(1, 2)'), ('(1, 1)', '(2, 1)'), 
#      ('(1, 1)', '(0, 0)'), ('(1, 1)', '(0, 2)'), ('(1, 1)', '(2, 0)'), ('(1, 1)', '(2, 2)'), ('(1, 2)', '(0, 2)'),
#      ('(1, 2)', '(1, 1)'), ('(1, 2)', '(2, 2)'), ('(1, 2)', '(0, 1)'), ('(1, 2)', '(2, 1)'), ('(2, 0)', '(2, 1)'),
#      ('(2, 0)', '(1, 0)'), ('(2, 0)', '(1, 1)'), ('(2, 1)', '(2, 0)'), ('(2, 1)', '(1, 1)'), ('(2, 1)', '(2, 2)'), 
#      ('(2, 1)', '(1, 0)'), ('(2, 1)', '(1, 2)'), ('(2, 2)', '(1, 2)'), ('(2, 2)', '(2, 1)'), ('(2, 2)', '(1, 1)')]

E = [('(0, 0)', '(0, 1)'), ('(0, 0)', '(1, 0)'), ('(0, 0)', '(1, 1)'), ('(0, 1)', '(0, 0)'), ('(0, 1)', '(0, 2)'), ('(0, 1)', '(1, 1)'), ('(0, 1)', '(1, 0)'), 
('(0, 1)', '(1, 2)'), ('(0, 2)', '(1, 2)'), ('(0, 2)', '(0, 1)'), ('(0, 2)', '(0, 3)'), ('(0, 2)', '(1, 1)'), ('(0, 2)', '(1, 3)'), ('(0, 3)', '(0, 2)'), 
('(0, 3)', '(0, 4)'), ('(0, 3)', '(0, 6)'), ('(0, 3)', '(1, 3)'), ('(0, 3)', '(1, 2)'), ('(0, 3)', '(1, 4)'), ('(0, 3)', '(1, 6)'), ('(0, 4)', '(0, 3)'), 
('(0, 4)', '(0, 5)'), ('(0, 4)', '(1, 4)'), ('(0, 4)', '(1, 3)'), ('(0, 4)', '(1, 5)'), ('(0, 5)', '(0, 4)'), ('(0, 5)', '(1, 5)'), ('(0, 5)', '(1, 4)'), 
('(0, 6)', '(0, 3)'), ('(0, 6)', '(1, 6)'), ('(0, 6)', '(1, 3)'), ('(1, 0)', '(0, 0)'), ('(1, 0)', '(1, 1)'), ('(1, 0)', '(2, 0)'), ('(1, 0)', '(0, 1)'), 
('(1, 0)', '(2, 1)'), ('(1, 1)', '(0, 1)'), ('(1, 1)', '(1, 0)'), ('(1, 1)', '(1, 2)'), ('(1, 1)', '(2, 1)'), ('(1, 1)', '(0, 0)'), ('(1, 1)', '(0, 2)'), 
('(1, 1)', '(2, 0)'), ('(1, 1)', '(2, 2)'), ('(1, 2)', '(0, 2)'), ('(1, 2)', '(1, 1)'), ('(1, 2)', '(1, 3)'), ('(1, 2)', '(2, 2)'), ('(1, 2)', '(0, 1)'), 
('(1, 2)', '(0, 3)'), ('(1, 2)', '(2, 1)'), ('(1, 2)', '(2, 3)'), ('(1, 3)', '(0, 3)'), ('(1, 3)', '(1, 2)'), ('(1, 3)', '(1, 4)'), ('(1, 3)', '(1, 6)'), 
('(1, 3)', '(2, 3)'), ('(1, 3)', '(0, 2)'), ('(1, 3)', '(0, 4)'), ('(1, 3)', '(0, 6)'), ('(1, 3)', '(2, 2)'), ('(1, 3)', '(2, 4)'), ('(1, 3)', '(2, 6)'),
('(1, 4)', '(0, 4)'), ('(1, 4)', '(1, 3)'), ('(1, 4)', '(1, 5)'), ('(1, 4)', '(2, 4)'), ('(1, 4)', '(0, 3)'), ('(1, 4)', '(0, 5)'), ('(1, 4)', '(2, 3)'), 
('(1, 4)', '(2, 5)'), ('(1, 5)', '(0, 5)'), ('(1, 5)', '(1, 4)'), ('(1, 5)', '(2, 5)'), ('(1, 5)', '(0, 4)'), ('(1, 5)', '(2, 4)'), ('(1, 6)', '(0, 6)'), 
('(1, 6)', '(1, 3)'), ('(1, 6)', '(2, 6)'), ('(1, 6)', '(0, 3)'), ('(1, 6)', '(2, 3)'), ('(2, 0)', '(2, 1)'), ('(2, 0)', '(1, 0)'), ('(2, 0)', '(3, 0)'),
('(2, 0)', '(1, 1)'), ('(2, 0)', '(3, 1)'), ('(2, 1)', '(2, 0)'), ('(2, 1)', '(1, 1)'), ('(2, 1)', '(2, 2)'), ('(2, 1)', '(3, 1)'), ('(2, 1)', '(1, 0)'), 
('(2, 1)', '(1, 2)'), ('(2, 1)', '(3, 0)'), ('(2, 1)', '(3, 2)'), ('(2, 2)', '(2, 3)'), ('(2, 2)', '(3, 2)'), ('(2, 2)', '(1, 2)'), ('(2, 2)', '(2, 1)'), 
('(2, 2)', '(1, 1)'), ('(2, 2)', '(1, 3)'), ('(2, 2)', '(3, 1)'), ('(2, 2)', '(3, 3)'), ('(2, 3)', '(2, 2)'), ('(2, 3)', '(1, 3)'), ('(2, 3)', '(2, 4)'), 
('(2, 3)', '(2, 6)'), ('(2, 3)', '(3, 3)'), ('(2, 3)', '(1, 2)'), ('(2, 3)', '(1, 4)'), ('(2, 3)', '(1, 6)'), ('(2, 3)', '(3, 2)'), ('(2, 3)', '(3, 4)'), 
('(2, 3)', '(3, 6)'), ('(2, 4)', '(3, 4)'), ('(2, 4)', '(1, 4)'), ('(2, 4)', '(2, 3)'), ('(2, 4)', '(2, 5)'), ('(2, 4)', '(1, 3)'), ('(2, 4)', '(1, 5)'), 
('(2, 4)', '(3, 3)'), ('(2, 4)', '(3, 5)'), ('(2, 5)', '(1, 5)'), ('(2, 5)', '(2, 4)'), ('(2, 5)', '(3, 5)'), ('(2, 5)', '(1, 4)'), ('(2, 5)', '(3, 4)'), 
('(2, 6)', '(1, 6)'), ('(2, 6)', '(2, 3)'), ('(2, 6)', '(3, 6)'), ('(2, 6)', '(1, 3)'), ('(2, 6)', '(3, 3)'), ('(3, 0)', '(2, 0)'), ('(3, 0)', '(3, 1)'), 
('(3, 0)', '(4, 0)'), ('(3, 0)', '(6, 0)'), ('(3, 0)', '(2, 1)'), ('(3, 0)', '(4, 1)'), ('(3, 0)', '(6, 1)'), ('(3, 1)', '(2, 1)'), ('(3, 1)', '(3, 0)'), 
('(3, 1)', '(3, 2)'), ('(3, 1)', '(4, 1)'), ('(3, 1)', '(6, 1)'), ('(3, 1)', '(2, 0)'), ('(3, 1)', '(2, 2)'), ('(3, 1)', '(4, 0)'), ('(3, 1)', '(4, 2)'), 
('(3, 1)', '(6, 0)'), ('(3, 1)', '(6, 2)'), ('(3, 2)', '(2, 2)'), ('(3, 2)', '(3, 1)'), ('(3, 2)', '(3, 3)'), ('(3, 2)', '(4, 2)'), ('(3, 2)', '(6, 2)'), 
('(3, 2)', '(2, 1)'), ('(3, 2)', '(2, 3)'), ('(3, 2)', '(4, 1)'), ('(3, 2)', '(4, 3)'), ('(3, 2)', '(6, 1)'), ('(3, 2)', '(6, 3)'), ('(3, 3)', '(2, 3)'), 
('(3, 3)', '(3, 2)'), ('(3, 3)', '(3, 4)'), ('(3, 3)', '(3, 6)'), ('(3, 3)', '(4, 3)'), ('(3, 3)', '(6, 3)'), ('(3, 3)', '(2, 2)'), ('(3, 3)', '(2, 4)'), 
('(3, 3)', '(2, 6)'), ('(3, 3)', '(4, 2)'), ('(3, 3)', '(4, 4)'), ('(3, 3)', '(4, 6)'), ('(3, 3)', '(6, 2)'), ('(3, 3)', '(6, 4)'), ('(3, 3)', '(6, 6)'), 
('(3, 4)', '(2, 4)'), ('(3, 4)', '(3, 5)'), ('(3, 4)', '(3, 3)'), ('(3, 4)', '(4, 4)'), ('(3, 4)', '(6, 4)'), ('(3, 4)', '(2, 3)'), ('(3, 4)', '(2, 5)'), 
('(3, 4)', '(4, 3)'), ('(3, 4)', '(4, 5)'), ('(3, 4)', '(6, 3)'), ('(3, 4)', '(6, 5)'), ('(3, 5)', '(3, 4)'), ('(3, 5)', '(2, 5)'), ('(3, 5)', '(4, 5)'), 
('(3, 5)', '(6, 5)'), ('(3, 5)', '(2, 4)'), ('(3, 5)', '(4, 4)'), ('(3, 5)', '(6, 4)'), ('(3, 6)', '(2, 6)'), ('(3, 6)', '(3, 3)'), ('(3, 6)', '(4, 6)'), 
('(3, 6)', '(6, 6)'), ('(3, 6)', '(2, 3)'), ('(3, 6)', '(4, 3)'), ('(3, 6)', '(6, 3)'), ('(4, 0)', '(3, 0)'), ('(4, 0)', '(4, 1)'), ('(4, 0)', '(5, 0)'), 
('(4, 0)', '(3, 1)'), ('(4, 0)', '(5, 1)'), ('(4, 1)', '(3, 1)'), ('(4, 1)', '(4, 0)'), ('(4, 1)', '(4, 2)'), ('(4, 1)', '(5, 1)'), ('(4, 1)', '(3, 0)'), 
('(4, 1)', '(3, 2)'), ('(4, 1)', '(5, 0)'), ('(4, 1)', '(5, 2)'), ('(4, 2)', '(4, 3)'), ('(4, 2)', '(3, 2)'), ('(4, 2)', '(4, 1)'), ('(4, 2)', '(5, 2)'), 
('(4, 2)', '(3, 1)'), ('(4, 2)', '(3, 3)'), ('(4, 2)', '(5, 1)'), ('(4, 2)', '(5, 3)'), ('(4, 3)', '(4, 2)'), ('(4, 3)', '(5, 3)'), ('(4, 3)', '(3, 3)'), 
('(4, 3)', '(4, 4)'), ('(4, 3)', '(4, 6)'), ('(4, 3)', '(3, 2)'), ('(4, 3)', '(3, 4)'), ('(4, 3)', '(3, 6)'), ('(4, 3)', '(5, 2)'), ('(4, 3)', '(5, 4)'), 
('(4, 3)', '(5, 6)'), ('(4, 4)', '(3, 4)'), ('(4, 4)', '(4, 3)'), ('(4, 4)', '(4, 5)'), ('(4, 4)', '(5, 4)'), ('(4, 4)', '(3, 3)'), ('(4, 4)', '(3, 5)'),
('(4, 4)', '(5, 3)'), ('(4, 4)', '(5, 5)'), ('(4, 5)', '(5, 5)'), ('(4, 5)', '(3, 5)'), ('(4, 5)', '(4, 4)'), ('(4, 5)', '(3, 4)'), ('(4, 5)', '(5, 4)'), 
('(4, 6)', '(3, 6)'), ('(4, 6)', '(4, 3)'), ('(4, 6)', '(5, 6)'), ('(4, 6)', '(3, 3)'), ('(4, 6)', '(5, 3)'), ('(5, 0)', '(4, 0)'), ('(5, 0)', '(5, 1)'), 
('(5, 0)', '(4, 1)'), ('(5, 1)', '(4, 1)'), ('(5, 1)', '(5, 0)'), ('(5, 1)', '(5, 2)'), ('(5, 1)', '(4, 0)'), ('(5, 1)', '(4, 2)'), ('(5, 2)', '(4, 2)'), 
('(5, 2)', '(5, 1)'), ('(5, 2)', '(5, 3)'), ('(5, 2)', '(4, 1)'), ('(5, 2)', '(4, 3)'), ('(5, 3)', '(4, 3)'), ('(5, 3)', '(5, 2)'), ('(5, 3)', '(5, 4)'),
('(5, 3)', '(5, 6)'), ('(5, 3)', '(4, 2)'), ('(5, 3)', '(4, 4)'), ('(5, 3)', '(4, 6)'), ('(5, 4)', '(5, 5)'), ('(5, 4)', '(4, 4)'), ('(5, 4)', '(5, 3)'), 
('(5, 4)', '(4, 3)'), ('(5, 4)', '(4, 5)'), ('(5, 5)', '(4, 5)'), ('(5, 5)', '(5, 4)'), ('(5, 5)', '(4, 4)'), ('(5, 6)', '(4, 6)'), ('(5, 6)', '(5, 3)'),
('(5, 6)', '(4, 3)'), ('(6, 0)', '(3, 0)'), ('(6, 0)', '(6, 1)'), ('(6, 0)', '(3, 1)'), ('(6, 1)', '(3, 1)'), ('(6, 1)', '(6, 0)'), ('(6, 1)', '(6, 2)'), 
('(6, 1)', '(3, 0)'), ('(6, 1)', '(3, 2)'), ('(6, 2)', '(3, 2)'), ('(6, 2)', '(6, 1)'), ('(6, 2)', '(6, 3)'), ('(6, 2)', '(3, 1)'), ('(6, 2)', '(3, 3)'),
('(6, 3)', '(3, 3)'), ('(6, 3)', '(6, 2)'), ('(6, 3)', '(6, 4)'), ('(6, 3)', '(6, 6)'), ('(6, 3)', '(3, 2)'), ('(6, 3)', '(3, 4)'), ('(6, 3)', '(3, 6)'), 
('(6, 4)', '(3, 4)'), ('(6, 4)', '(6, 3)'), ('(6, 4)', '(6, 5)'), ('(6, 4)', '(3, 3)'), ('(6, 4)', '(3, 5)'), ('(6, 5)', '(3, 5)'), ('(6, 5)', '(6, 4)'), 
('(6, 5)', '(3, 4)'), ('(6, 6)', '(3, 6)'), ('(6, 6)', '(6, 3)'), ('(6, 6)', '(3, 3)')]

# #plot_environment_graph(E)
#plot_environment_graph_test(E)


# G = nx.Graph(node_type="joint_state_space")
# G.add_edges_from(E)
# nodes = [eval(node) for node in G]
# print([eval(node) for node in G])

# pos = {}
# for n in nodes:
#     pos[str(n)] = n
    
# print(pos)

# # plt.figure()
# # #nx.draw(graph, with_labels=False)
# # nx.draw(G, with_labels=False, pos=pos,node_color='green', node_size = 70)
# # nx.draw_networkx_labels(G, pos)
# # nx.draw_networkx_edges(G, pos, edgelist=[('(0, 3)','(0, 6)')], connectionstyle='arc3, rad = 0.3')

# # plt.show()

# nx.draw_networkx_nodes(G, pos=pos, node_color = 'green', node_size = 50, alpha = 1)
# nx.draw_networkx_labels(G,pos)
# edges = [ ('(0, 3)', '(0, 6)'), 
#          ('(1, 3)', '(1, 6)'),
#          ('(2, 3)', '(2, 6)'),
#          ('(3, 3)', '(3, 6)'),
#          ('(4, 3)', '(4, 6)'),
#          ('(5, 3)', '(5, 6)'),
#          ('(6, 3)', '(6, 6)'),
#          ('(3, 6)', '(6, 6)'),
#          ('(3, 5)', '(6, 5)'),
#          ('(3, 4)', '(6, 4)'),
#          ('(3, 3)', '(6, 3)'),
#          ('(3, 2)', '(6, 2)'),
#          ('(3, 1)', '(6, 1)'),
#          ('(3, 0)', '(6, 0)')]
# ax = plt.gca()
# for e in edges:
#     ax.annotate("",
#                 xy=pos[e[0]], xycoords='data',
#                 xytext=pos[e[1]], textcoords='data',
#                 arrowprops=dict(arrowstyle="-", color="black",
#                                 shrinkA=5, shrinkB=5,
#                                 patchA=None, patchB=None,
#                                 connectionstyle="arc3,rad=0.4"))
# nx.draw_networkx_edges(G, pos, edgelist=G.edges)
# plt.axis('off')
# plt.show()